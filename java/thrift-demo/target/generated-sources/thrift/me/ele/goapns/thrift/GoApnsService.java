/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.ele.goapns.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-15")
public class GoApnsService {

  /**
   * API
   */
  public interface Iface {

    public boolean ping() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException;

    public String send_message(TMessage message) throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException;

    public void update_application_pem(TApplicationPem pem) throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void send_message(TMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_application_pem(TApplicationPem pem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean ping() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean recv_ping() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.user_exception != null) {
        throw result.user_exception;
      }
      if (result.system_exception != null) {
        throw result.system_exception;
      }
      if (result.unknown_exception != null) {
        throw result.unknown_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public String send_message(TMessage message) throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException
    {
      send_send_message(message);
      return recv_send_message();
    }

    public void send_send_message(TMessage message) throws org.apache.thrift.TException
    {
      send_message_args args = new send_message_args();
      args.setMessage(message);
      sendBase("send_message", args);
    }

    public String recv_send_message() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException
    {
      send_message_result result = new send_message_result();
      receiveBase(result, "send_message");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.user_exception != null) {
        throw result.user_exception;
      }
      if (result.system_exception != null) {
        throw result.system_exception;
      }
      if (result.unknown_exception != null) {
        throw result.unknown_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "send_message failed: unknown result");
    }

    public void update_application_pem(TApplicationPem pem) throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException
    {
      send_update_application_pem(pem);
      recv_update_application_pem();
    }

    public void send_update_application_pem(TApplicationPem pem) throws org.apache.thrift.TException
    {
      update_application_pem_args args = new update_application_pem_args();
      args.setPem(pem);
      sendBase("update_application_pem", args);
    }

    public void recv_update_application_pem() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException
    {
      update_application_pem_result result = new update_application_pem_result();
      receiveBase(result, "update_application_pem");
      if (result.user_exception != null) {
        throw result.user_exception;
      }
      if (result.system_exception != null) {
        throw result.system_exception;
      }
      if (result.unknown_exception != null) {
        throw result.unknown_exception;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void send_message(TMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      send_message_call method_call = new send_message_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class send_message_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TMessage message;
      public send_message_call(TMessage message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send_message", org.apache.thrift.protocol.TMessageType.CALL, 0));
        send_message_args args = new send_message_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_send_message();
      }
    }

    public void update_application_pem(TApplicationPem pem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_application_pem_call method_call = new update_application_pem_call(pem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_application_pem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TApplicationPem pem;
      public update_application_pem_call(TApplicationPem pem, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pem = pem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_application_pem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_application_pem_args args = new update_application_pem_args();
        args.setPem(pem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws GoApnsUserException, GoApnsSystemException, GoApnsUnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_update_application_pem();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("send_message", new send_message());
      processMap.put("update_application_pem", new update_application_pem());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          result.success = iface.ping();
          result.setSuccessIsSet(true);
        } catch (GoApnsUserException user_exception) {
          result.user_exception = user_exception;
        } catch (GoApnsSystemException system_exception) {
          result.system_exception = system_exception;
        } catch (GoApnsUnknownException unknown_exception) {
          result.unknown_exception = unknown_exception;
        }
        return result;
      }
    }

    public static class send_message<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_message_args> {
      public send_message() {
        super("send_message");
      }

      public send_message_args getEmptyArgsInstance() {
        return new send_message_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public send_message_result getResult(I iface, send_message_args args) throws org.apache.thrift.TException {
        send_message_result result = new send_message_result();
        try {
          result.success = iface.send_message(args.message);
        } catch (GoApnsUserException user_exception) {
          result.user_exception = user_exception;
        } catch (GoApnsSystemException system_exception) {
          result.system_exception = system_exception;
        } catch (GoApnsUnknownException unknown_exception) {
          result.unknown_exception = unknown_exception;
        }
        return result;
      }
    }

    public static class update_application_pem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_application_pem_args> {
      public update_application_pem() {
        super("update_application_pem");
      }

      public update_application_pem_args getEmptyArgsInstance() {
        return new update_application_pem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_application_pem_result getResult(I iface, update_application_pem_args args) throws org.apache.thrift.TException {
        update_application_pem_result result = new update_application_pem_result();
        try {
          iface.update_application_pem(args.pem);
        } catch (GoApnsUserException user_exception) {
          result.user_exception = user_exception;
        } catch (GoApnsSystemException system_exception) {
          result.system_exception = system_exception;
        } catch (GoApnsUnknownException unknown_exception) {
          result.unknown_exception = unknown_exception;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("send_message", new send_message());
      processMap.put("update_application_pem", new update_application_pem());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            if (e instanceof GoApnsUserException) {
                        result.user_exception = (GoApnsUserException) e;
                        result.setUser_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof GoApnsSystemException) {
                        result.system_exception = (GoApnsSystemException) e;
                        result.setSystem_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof GoApnsUnknownException) {
                        result.unknown_exception = (GoApnsUnknownException) e;
                        result.setUnknown_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class send_message<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, send_message_args, String> {
      public send_message() {
        super("send_message");
      }

      public send_message_args getEmptyArgsInstance() {
        return new send_message_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            send_message_result result = new send_message_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            send_message_result result = new send_message_result();
            if (e instanceof GoApnsUserException) {
                        result.user_exception = (GoApnsUserException) e;
                        result.setUser_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof GoApnsSystemException) {
                        result.system_exception = (GoApnsSystemException) e;
                        result.setSystem_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof GoApnsUnknownException) {
                        result.unknown_exception = (GoApnsUnknownException) e;
                        result.setUnknown_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, send_message_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.send_message(args.message,resultHandler);
      }
    }

    public static class update_application_pem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_application_pem_args, Void> {
      public update_application_pem() {
        super("update_application_pem");
      }

      public update_application_pem_args getEmptyArgsInstance() {
        return new update_application_pem_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            update_application_pem_result result = new update_application_pem_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_application_pem_result result = new update_application_pem_result();
            if (e instanceof GoApnsUserException) {
                        result.user_exception = (GoApnsUserException) e;
                        result.setUser_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof GoApnsSystemException) {
                        result.system_exception = (GoApnsSystemException) e;
                        result.setSystem_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof GoApnsUnknownException) {
                        result.unknown_exception = (GoApnsUnknownException) e;
                        result.setUnknown_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_application_pem_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.update_application_pem(args.pem,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("user_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("system_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public GoApnsUserException user_exception; // required
    public GoApnsSystemException system_exception; // required
    public GoApnsUnknownException unknown_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "user_exception"),
      SYSTEM_EXCEPTION((short)2, "system_exception"),
      UNKNOWN_EXCEPTION((short)3, "unknown_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // UNKNOWN_EXCEPTION
            return UNKNOWN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("user_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("system_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNKNOWN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknown_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success,
      GoApnsUserException user_exception,
      GoApnsSystemException system_exception,
      GoApnsUnknownException unknown_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.user_exception = user_exception;
      this.system_exception = system_exception;
      this.unknown_exception = unknown_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUser_exception()) {
        this.user_exception = new GoApnsUserException(other.user_exception);
      }
      if (other.isSetSystem_exception()) {
        this.system_exception = new GoApnsSystemException(other.system_exception);
      }
      if (other.isSetUnknown_exception()) {
        this.unknown_exception = new GoApnsUnknownException(other.unknown_exception);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.user_exception = null;
      this.system_exception = null;
      this.unknown_exception = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public GoApnsUserException getUser_exception() {
      return this.user_exception;
    }

    public ping_result setUser_exception(GoApnsUserException user_exception) {
      this.user_exception = user_exception;
      return this;
    }

    public void unsetUser_exception() {
      this.user_exception = null;
    }

    /** Returns true if field user_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_exception() {
      return this.user_exception != null;
    }

    public void setUser_exceptionIsSet(boolean value) {
      if (!value) {
        this.user_exception = null;
      }
    }

    public GoApnsSystemException getSystem_exception() {
      return this.system_exception;
    }

    public ping_result setSystem_exception(GoApnsSystemException system_exception) {
      this.system_exception = system_exception;
      return this;
    }

    public void unsetSystem_exception() {
      this.system_exception = null;
    }

    /** Returns true if field system_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetSystem_exception() {
      return this.system_exception != null;
    }

    public void setSystem_exceptionIsSet(boolean value) {
      if (!value) {
        this.system_exception = null;
      }
    }

    public GoApnsUnknownException getUnknown_exception() {
      return this.unknown_exception;
    }

    public ping_result setUnknown_exception(GoApnsUnknownException unknown_exception) {
      this.unknown_exception = unknown_exception;
      return this;
    }

    public void unsetUnknown_exception() {
      this.unknown_exception = null;
    }

    /** Returns true if field unknown_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_exception() {
      return this.unknown_exception != null;
    }

    public void setUnknown_exceptionIsSet(boolean value) {
      if (!value) {
        this.unknown_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUser_exception();
        } else {
          setUser_exception((GoApnsUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystem_exception();
        } else {
          setSystem_exception((GoApnsSystemException)value);
        }
        break;

      case UNKNOWN_EXCEPTION:
        if (value == null) {
          unsetUnknown_exception();
        } else {
          setUnknown_exception((GoApnsUnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case USER_EXCEPTION:
        return getUser_exception();

      case SYSTEM_EXCEPTION:
        return getSystem_exception();

      case UNKNOWN_EXCEPTION:
        return getUnknown_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUser_exception();
      case SYSTEM_EXCEPTION:
        return isSetSystem_exception();
      case UNKNOWN_EXCEPTION:
        return isSetUnknown_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_user_exception = true && this.isSetUser_exception();
      boolean that_present_user_exception = true && that.isSetUser_exception();
      if (this_present_user_exception || that_present_user_exception) {
        if (!(this_present_user_exception && that_present_user_exception))
          return false;
        if (!this.user_exception.equals(that.user_exception))
          return false;
      }

      boolean this_present_system_exception = true && this.isSetSystem_exception();
      boolean that_present_system_exception = true && that.isSetSystem_exception();
      if (this_present_system_exception || that_present_system_exception) {
        if (!(this_present_system_exception && that_present_system_exception))
          return false;
        if (!this.system_exception.equals(that.system_exception))
          return false;
      }

      boolean this_present_unknown_exception = true && this.isSetUnknown_exception();
      boolean that_present_unknown_exception = true && that.isSetUnknown_exception();
      if (this_present_unknown_exception || that_present_unknown_exception) {
        if (!(this_present_unknown_exception && that_present_unknown_exception))
          return false;
        if (!this.unknown_exception.equals(that.unknown_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_user_exception = true && (isSetUser_exception());
      list.add(present_user_exception);
      if (present_user_exception)
        list.add(user_exception);

      boolean present_system_exception = true && (isSetSystem_exception());
      list.add(present_system_exception);
      if (present_system_exception)
        list.add(system_exception);

      boolean present_unknown_exception = true && (isSetUnknown_exception());
      list.add(present_unknown_exception);
      if (present_unknown_exception)
        list.add(unknown_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(other.isSetUser_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_exception, other.user_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystem_exception()).compareTo(other.isSetSystem_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystem_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system_exception, other.system_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_exception()).compareTo(other.isSetUnknown_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_exception, other.unknown_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_exception:");
      if (this.user_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.user_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("system_exception:");
      if (this.system_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.system_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_exception:");
      if (this.unknown_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user_exception = new GoApnsUserException();
                struct.user_exception.read(iprot);
                struct.setUser_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.system_exception = new GoApnsSystemException();
                struct.system_exception.read(iprot);
                struct.setSystem_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNKNOWN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_exception = new GoApnsUnknownException();
                struct.unknown_exception.read(iprot);
                struct.setUnknown_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.user_exception != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.user_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.system_exception != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.system_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_exception != null) {
          oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
          struct.unknown_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUser_exception()) {
          optionals.set(1);
        }
        if (struct.isSetSystem_exception()) {
          optionals.set(2);
        }
        if (struct.isSetUnknown_exception()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUser_exception()) {
          struct.user_exception.write(oprot);
        }
        if (struct.isSetSystem_exception()) {
          struct.system_exception.write(oprot);
        }
        if (struct.isSetUnknown_exception()) {
          struct.unknown_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_exception = new GoApnsUserException();
          struct.user_exception.read(iprot);
          struct.setUser_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.system_exception = new GoApnsSystemException();
          struct.system_exception.read(iprot);
          struct.setSystem_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unknown_exception = new GoApnsUnknownException();
          struct.unknown_exception.read(iprot);
          struct.setUnknown_exceptionIsSet(true);
        }
      }
    }

  }

  public static class send_message_args implements org.apache.thrift.TBase<send_message_args, send_message_args._Fields>, java.io.Serializable, Cloneable, Comparable<send_message_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_message_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_message_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_message_argsTupleSchemeFactory());
    }

    public TMessage message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_message_args.class, metaDataMap);
    }

    public send_message_args() {
    }

    public send_message_args(
      TMessage message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_message_args(send_message_args other) {
      if (other.isSetMessage()) {
        this.message = new TMessage(other.message);
      }
    }

    public send_message_args deepCopy() {
      return new send_message_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public TMessage getMessage() {
      return this.message;
    }

    public send_message_args setMessage(TMessage message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((TMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_message_args)
        return this.equals((send_message_args)that);
      return false;
    }

    public boolean equals(send_message_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(send_message_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_message_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (message != null) {
        message.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_message_argsStandardSchemeFactory implements SchemeFactory {
      public send_message_argsStandardScheme getScheme() {
        return new send_message_argsStandardScheme();
      }
    }

    private static class send_message_argsStandardScheme extends StandardScheme<send_message_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_message_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.message = new TMessage();
                struct.message.read(iprot);
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_message_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_message_argsTupleSchemeFactory implements SchemeFactory {
      public send_message_argsTupleScheme getScheme() {
        return new send_message_argsTupleScheme();
      }
    }

    private static class send_message_argsTupleScheme extends TupleScheme<send_message_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_message_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          struct.message.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_message_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = new TMessage();
          struct.message.read(iprot);
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class send_message_result implements org.apache.thrift.TBase<send_message_result, send_message_result._Fields>, java.io.Serializable, Cloneable, Comparable<send_message_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_message_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("user_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("system_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_message_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_message_resultTupleSchemeFactory());
    }

    public String success; // required
    public GoApnsUserException user_exception; // required
    public GoApnsSystemException system_exception; // required
    public GoApnsUnknownException unknown_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "user_exception"),
      SYSTEM_EXCEPTION((short)2, "system_exception"),
      UNKNOWN_EXCEPTION((short)3, "unknown_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // UNKNOWN_EXCEPTION
            return UNKNOWN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("user_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("system_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNKNOWN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknown_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_message_result.class, metaDataMap);
    }

    public send_message_result() {
    }

    public send_message_result(
      String success,
      GoApnsUserException user_exception,
      GoApnsSystemException system_exception,
      GoApnsUnknownException unknown_exception)
    {
      this();
      this.success = success;
      this.user_exception = user_exception;
      this.system_exception = system_exception;
      this.unknown_exception = unknown_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_message_result(send_message_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUser_exception()) {
        this.user_exception = new GoApnsUserException(other.user_exception);
      }
      if (other.isSetSystem_exception()) {
        this.system_exception = new GoApnsSystemException(other.system_exception);
      }
      if (other.isSetUnknown_exception()) {
        this.unknown_exception = new GoApnsUnknownException(other.unknown_exception);
      }
    }

    public send_message_result deepCopy() {
      return new send_message_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.user_exception = null;
      this.system_exception = null;
      this.unknown_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public send_message_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public GoApnsUserException getUser_exception() {
      return this.user_exception;
    }

    public send_message_result setUser_exception(GoApnsUserException user_exception) {
      this.user_exception = user_exception;
      return this;
    }

    public void unsetUser_exception() {
      this.user_exception = null;
    }

    /** Returns true if field user_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_exception() {
      return this.user_exception != null;
    }

    public void setUser_exceptionIsSet(boolean value) {
      if (!value) {
        this.user_exception = null;
      }
    }

    public GoApnsSystemException getSystem_exception() {
      return this.system_exception;
    }

    public send_message_result setSystem_exception(GoApnsSystemException system_exception) {
      this.system_exception = system_exception;
      return this;
    }

    public void unsetSystem_exception() {
      this.system_exception = null;
    }

    /** Returns true if field system_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetSystem_exception() {
      return this.system_exception != null;
    }

    public void setSystem_exceptionIsSet(boolean value) {
      if (!value) {
        this.system_exception = null;
      }
    }

    public GoApnsUnknownException getUnknown_exception() {
      return this.unknown_exception;
    }

    public send_message_result setUnknown_exception(GoApnsUnknownException unknown_exception) {
      this.unknown_exception = unknown_exception;
      return this;
    }

    public void unsetUnknown_exception() {
      this.unknown_exception = null;
    }

    /** Returns true if field unknown_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_exception() {
      return this.unknown_exception != null;
    }

    public void setUnknown_exceptionIsSet(boolean value) {
      if (!value) {
        this.unknown_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUser_exception();
        } else {
          setUser_exception((GoApnsUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystem_exception();
        } else {
          setSystem_exception((GoApnsSystemException)value);
        }
        break;

      case UNKNOWN_EXCEPTION:
        if (value == null) {
          unsetUnknown_exception();
        } else {
          setUnknown_exception((GoApnsUnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUser_exception();

      case SYSTEM_EXCEPTION:
        return getSystem_exception();

      case UNKNOWN_EXCEPTION:
        return getUnknown_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUser_exception();
      case SYSTEM_EXCEPTION:
        return isSetSystem_exception();
      case UNKNOWN_EXCEPTION:
        return isSetUnknown_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_message_result)
        return this.equals((send_message_result)that);
      return false;
    }

    public boolean equals(send_message_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_user_exception = true && this.isSetUser_exception();
      boolean that_present_user_exception = true && that.isSetUser_exception();
      if (this_present_user_exception || that_present_user_exception) {
        if (!(this_present_user_exception && that_present_user_exception))
          return false;
        if (!this.user_exception.equals(that.user_exception))
          return false;
      }

      boolean this_present_system_exception = true && this.isSetSystem_exception();
      boolean that_present_system_exception = true && that.isSetSystem_exception();
      if (this_present_system_exception || that_present_system_exception) {
        if (!(this_present_system_exception && that_present_system_exception))
          return false;
        if (!this.system_exception.equals(that.system_exception))
          return false;
      }

      boolean this_present_unknown_exception = true && this.isSetUnknown_exception();
      boolean that_present_unknown_exception = true && that.isSetUnknown_exception();
      if (this_present_unknown_exception || that_present_unknown_exception) {
        if (!(this_present_unknown_exception && that_present_unknown_exception))
          return false;
        if (!this.unknown_exception.equals(that.unknown_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_user_exception = true && (isSetUser_exception());
      list.add(present_user_exception);
      if (present_user_exception)
        list.add(user_exception);

      boolean present_system_exception = true && (isSetSystem_exception());
      list.add(present_system_exception);
      if (present_system_exception)
        list.add(system_exception);

      boolean present_unknown_exception = true && (isSetUnknown_exception());
      list.add(present_unknown_exception);
      if (present_unknown_exception)
        list.add(unknown_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(send_message_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(other.isSetUser_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_exception, other.user_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystem_exception()).compareTo(other.isSetSystem_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystem_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system_exception, other.system_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_exception()).compareTo(other.isSetUnknown_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_exception, other.unknown_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_message_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_exception:");
      if (this.user_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.user_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("system_exception:");
      if (this.system_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.system_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_exception:");
      if (this.unknown_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_message_resultStandardSchemeFactory implements SchemeFactory {
      public send_message_resultStandardScheme getScheme() {
        return new send_message_resultStandardScheme();
      }
    }

    private static class send_message_resultStandardScheme extends StandardScheme<send_message_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_message_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user_exception = new GoApnsUserException();
                struct.user_exception.read(iprot);
                struct.setUser_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.system_exception = new GoApnsSystemException();
                struct.system_exception.read(iprot);
                struct.setSystem_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNKNOWN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_exception = new GoApnsUnknownException();
                struct.unknown_exception.read(iprot);
                struct.setUnknown_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_message_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.user_exception != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.user_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.system_exception != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.system_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_exception != null) {
          oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
          struct.unknown_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_message_resultTupleSchemeFactory implements SchemeFactory {
      public send_message_resultTupleScheme getScheme() {
        return new send_message_resultTupleScheme();
      }
    }

    private static class send_message_resultTupleScheme extends TupleScheme<send_message_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_message_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUser_exception()) {
          optionals.set(1);
        }
        if (struct.isSetSystem_exception()) {
          optionals.set(2);
        }
        if (struct.isSetUnknown_exception()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUser_exception()) {
          struct.user_exception.write(oprot);
        }
        if (struct.isSetSystem_exception()) {
          struct.system_exception.write(oprot);
        }
        if (struct.isSetUnknown_exception()) {
          struct.unknown_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_message_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_exception = new GoApnsUserException();
          struct.user_exception.read(iprot);
          struct.setUser_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.system_exception = new GoApnsSystemException();
          struct.system_exception.read(iprot);
          struct.setSystem_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unknown_exception = new GoApnsUnknownException();
          struct.unknown_exception.read(iprot);
          struct.setUnknown_exceptionIsSet(true);
        }
      }
    }

  }

  public static class update_application_pem_args implements org.apache.thrift.TBase<update_application_pem_args, update_application_pem_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_application_pem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_application_pem_args");

    private static final org.apache.thrift.protocol.TField PEM_FIELD_DESC = new org.apache.thrift.protocol.TField("pem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_application_pem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_application_pem_argsTupleSchemeFactory());
    }

    public TApplicationPem pem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PEM((short)1, "pem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PEM
            return PEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PEM, new org.apache.thrift.meta_data.FieldMetaData("pem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TApplicationPem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_application_pem_args.class, metaDataMap);
    }

    public update_application_pem_args() {
    }

    public update_application_pem_args(
      TApplicationPem pem)
    {
      this();
      this.pem = pem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_application_pem_args(update_application_pem_args other) {
      if (other.isSetPem()) {
        this.pem = new TApplicationPem(other.pem);
      }
    }

    public update_application_pem_args deepCopy() {
      return new update_application_pem_args(this);
    }

    @Override
    public void clear() {
      this.pem = null;
    }

    public TApplicationPem getPem() {
      return this.pem;
    }

    public update_application_pem_args setPem(TApplicationPem pem) {
      this.pem = pem;
      return this;
    }

    public void unsetPem() {
      this.pem = null;
    }

    /** Returns true if field pem is set (has been assigned a value) and false otherwise */
    public boolean isSetPem() {
      return this.pem != null;
    }

    public void setPemIsSet(boolean value) {
      if (!value) {
        this.pem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PEM:
        if (value == null) {
          unsetPem();
        } else {
          setPem((TApplicationPem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PEM:
        return getPem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PEM:
        return isSetPem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_application_pem_args)
        return this.equals((update_application_pem_args)that);
      return false;
    }

    public boolean equals(update_application_pem_args that) {
      if (that == null)
        return false;

      boolean this_present_pem = true && this.isSetPem();
      boolean that_present_pem = true && that.isSetPem();
      if (this_present_pem || that_present_pem) {
        if (!(this_present_pem && that_present_pem))
          return false;
        if (!this.pem.equals(that.pem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pem = true && (isSetPem());
      list.add(present_pem);
      if (present_pem)
        list.add(pem);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_application_pem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPem()).compareTo(other.isSetPem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pem, other.pem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_application_pem_args(");
      boolean first = true;

      sb.append("pem:");
      if (this.pem == null) {
        sb.append("null");
      } else {
        sb.append(this.pem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pem != null) {
        pem.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_application_pem_argsStandardSchemeFactory implements SchemeFactory {
      public update_application_pem_argsStandardScheme getScheme() {
        return new update_application_pem_argsStandardScheme();
      }
    }

    private static class update_application_pem_argsStandardScheme extends StandardScheme<update_application_pem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_application_pem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pem = new TApplicationPem();
                struct.pem.read(iprot);
                struct.setPemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_application_pem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pem != null) {
          oprot.writeFieldBegin(PEM_FIELD_DESC);
          struct.pem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_application_pem_argsTupleSchemeFactory implements SchemeFactory {
      public update_application_pem_argsTupleScheme getScheme() {
        return new update_application_pem_argsTupleScheme();
      }
    }

    private static class update_application_pem_argsTupleScheme extends TupleScheme<update_application_pem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_application_pem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPem()) {
          struct.pem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_application_pem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pem = new TApplicationPem();
          struct.pem.read(iprot);
          struct.setPemIsSet(true);
        }
      }
    }

  }

  public static class update_application_pem_result implements org.apache.thrift.TBase<update_application_pem_result, update_application_pem_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_application_pem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_application_pem_result");

    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("user_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("system_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_application_pem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_application_pem_resultTupleSchemeFactory());
    }

    public GoApnsUserException user_exception; // required
    public GoApnsSystemException system_exception; // required
    public GoApnsUnknownException unknown_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_EXCEPTION((short)1, "user_exception"),
      SYSTEM_EXCEPTION((short)2, "system_exception"),
      UNKNOWN_EXCEPTION((short)3, "unknown_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // UNKNOWN_EXCEPTION
            return UNKNOWN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("user_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("system_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNKNOWN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("unknown_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_application_pem_result.class, metaDataMap);
    }

    public update_application_pem_result() {
    }

    public update_application_pem_result(
      GoApnsUserException user_exception,
      GoApnsSystemException system_exception,
      GoApnsUnknownException unknown_exception)
    {
      this();
      this.user_exception = user_exception;
      this.system_exception = system_exception;
      this.unknown_exception = unknown_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_application_pem_result(update_application_pem_result other) {
      if (other.isSetUser_exception()) {
        this.user_exception = new GoApnsUserException(other.user_exception);
      }
      if (other.isSetSystem_exception()) {
        this.system_exception = new GoApnsSystemException(other.system_exception);
      }
      if (other.isSetUnknown_exception()) {
        this.unknown_exception = new GoApnsUnknownException(other.unknown_exception);
      }
    }

    public update_application_pem_result deepCopy() {
      return new update_application_pem_result(this);
    }

    @Override
    public void clear() {
      this.user_exception = null;
      this.system_exception = null;
      this.unknown_exception = null;
    }

    public GoApnsUserException getUser_exception() {
      return this.user_exception;
    }

    public update_application_pem_result setUser_exception(GoApnsUserException user_exception) {
      this.user_exception = user_exception;
      return this;
    }

    public void unsetUser_exception() {
      this.user_exception = null;
    }

    /** Returns true if field user_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_exception() {
      return this.user_exception != null;
    }

    public void setUser_exceptionIsSet(boolean value) {
      if (!value) {
        this.user_exception = null;
      }
    }

    public GoApnsSystemException getSystem_exception() {
      return this.system_exception;
    }

    public update_application_pem_result setSystem_exception(GoApnsSystemException system_exception) {
      this.system_exception = system_exception;
      return this;
    }

    public void unsetSystem_exception() {
      this.system_exception = null;
    }

    /** Returns true if field system_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetSystem_exception() {
      return this.system_exception != null;
    }

    public void setSystem_exceptionIsSet(boolean value) {
      if (!value) {
        this.system_exception = null;
      }
    }

    public GoApnsUnknownException getUnknown_exception() {
      return this.unknown_exception;
    }

    public update_application_pem_result setUnknown_exception(GoApnsUnknownException unknown_exception) {
      this.unknown_exception = unknown_exception;
      return this;
    }

    public void unsetUnknown_exception() {
      this.unknown_exception = null;
    }

    /** Returns true if field unknown_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_exception() {
      return this.unknown_exception != null;
    }

    public void setUnknown_exceptionIsSet(boolean value) {
      if (!value) {
        this.unknown_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_EXCEPTION:
        if (value == null) {
          unsetUser_exception();
        } else {
          setUser_exception((GoApnsUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystem_exception();
        } else {
          setSystem_exception((GoApnsSystemException)value);
        }
        break;

      case UNKNOWN_EXCEPTION:
        if (value == null) {
          unsetUnknown_exception();
        } else {
          setUnknown_exception((GoApnsUnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_EXCEPTION:
        return getUser_exception();

      case SYSTEM_EXCEPTION:
        return getSystem_exception();

      case UNKNOWN_EXCEPTION:
        return getUnknown_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_EXCEPTION:
        return isSetUser_exception();
      case SYSTEM_EXCEPTION:
        return isSetSystem_exception();
      case UNKNOWN_EXCEPTION:
        return isSetUnknown_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_application_pem_result)
        return this.equals((update_application_pem_result)that);
      return false;
    }

    public boolean equals(update_application_pem_result that) {
      if (that == null)
        return false;

      boolean this_present_user_exception = true && this.isSetUser_exception();
      boolean that_present_user_exception = true && that.isSetUser_exception();
      if (this_present_user_exception || that_present_user_exception) {
        if (!(this_present_user_exception && that_present_user_exception))
          return false;
        if (!this.user_exception.equals(that.user_exception))
          return false;
      }

      boolean this_present_system_exception = true && this.isSetSystem_exception();
      boolean that_present_system_exception = true && that.isSetSystem_exception();
      if (this_present_system_exception || that_present_system_exception) {
        if (!(this_present_system_exception && that_present_system_exception))
          return false;
        if (!this.system_exception.equals(that.system_exception))
          return false;
      }

      boolean this_present_unknown_exception = true && this.isSetUnknown_exception();
      boolean that_present_unknown_exception = true && that.isSetUnknown_exception();
      if (this_present_unknown_exception || that_present_unknown_exception) {
        if (!(this_present_unknown_exception && that_present_unknown_exception))
          return false;
        if (!this.unknown_exception.equals(that.unknown_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_exception = true && (isSetUser_exception());
      list.add(present_user_exception);
      if (present_user_exception)
        list.add(user_exception);

      boolean present_system_exception = true && (isSetSystem_exception());
      list.add(present_system_exception);
      if (present_system_exception)
        list.add(system_exception);

      boolean present_unknown_exception = true && (isSetUnknown_exception());
      list.add(present_unknown_exception);
      if (present_unknown_exception)
        list.add(unknown_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_application_pem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(other.isSetUser_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_exception, other.user_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystem_exception()).compareTo(other.isSetSystem_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystem_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system_exception, other.system_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_exception()).compareTo(other.isSetUnknown_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_exception, other.unknown_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_application_pem_result(");
      boolean first = true;

      sb.append("user_exception:");
      if (this.user_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.user_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("system_exception:");
      if (this.system_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.system_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_exception:");
      if (this.unknown_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_application_pem_resultStandardSchemeFactory implements SchemeFactory {
      public update_application_pem_resultStandardScheme getScheme() {
        return new update_application_pem_resultStandardScheme();
      }
    }

    private static class update_application_pem_resultStandardScheme extends StandardScheme<update_application_pem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_application_pem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user_exception = new GoApnsUserException();
                struct.user_exception.read(iprot);
                struct.setUser_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.system_exception = new GoApnsSystemException();
                struct.system_exception.read(iprot);
                struct.setSystem_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNKNOWN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_exception = new GoApnsUnknownException();
                struct.unknown_exception.read(iprot);
                struct.setUnknown_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_application_pem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_exception != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.user_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.system_exception != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.system_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_exception != null) {
          oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
          struct.unknown_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_application_pem_resultTupleSchemeFactory implements SchemeFactory {
      public update_application_pem_resultTupleScheme getScheme() {
        return new update_application_pem_resultTupleScheme();
      }
    }

    private static class update_application_pem_resultTupleScheme extends TupleScheme<update_application_pem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_application_pem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_exception()) {
          optionals.set(0);
        }
        if (struct.isSetSystem_exception()) {
          optionals.set(1);
        }
        if (struct.isSetUnknown_exception()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_exception()) {
          struct.user_exception.write(oprot);
        }
        if (struct.isSetSystem_exception()) {
          struct.system_exception.write(oprot);
        }
        if (struct.isSetUnknown_exception()) {
          struct.unknown_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_application_pem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_exception = new GoApnsUserException();
          struct.user_exception.read(iprot);
          struct.setUser_exceptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.system_exception = new GoApnsSystemException();
          struct.system_exception.read(iprot);
          struct.setSystem_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.unknown_exception = new GoApnsUnknownException();
          struct.unknown_exception.read(iprot);
          struct.setUnknown_exceptionIsSet(true);
        }
      }
    }

  }

}
