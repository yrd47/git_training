笔试原则:
不考太偏太难的题目，着重考察候选人的基本功。力求候选人可以写出bugfree的代码，充分考虑各种边界条件及异常处理。
部分题目的描述可能不是很精确，也期望候选人可以提出问题，及时与面试官沟通。

注意：面试官需要根据候选人的背景，选用不同的题目。


简单难度:

1. 遍历1-100，被3整除的输出a, 被5整除的输出b，被15整除的输出c。
点评: 刚哥御用笔试题，考察点主要在于被15整除的数也可以被3和5整除，写代码的时候注意绕过这个逻辑即可，据说有50%的人写不出来，o(╯□╰)o。

2. 输入一个字符串，全是大写字母范围从'A'-'Z'(A,B,C,D,AA,AB,AC)，输出相应的int值. (A=1,B=2,Z=26,AA=27...)
点评: 就是考察了一下 sum = sum * 26 + curr;

3. 求两个数的最大公约数
点评: 如果候选人知道辗转相除法，应该还是比较简单的。否则可能就写不出来了，面试官还是根据候选人的实际情况，看看要不要考察这道题目。


4. 判断一个字符串是不是回文,  given "abcba" return true， given "abcab" return false;
点评: 超级简单有木有，最多5分钟，不能再多了。


5. 输入两个字符串表示version，"1.1.2", "1.1.1", 判断两个version那个是最新的。(简化一下，假定输入都是合法的)
"1.1.1" < "1.1.2"。 "2" > "1.1"
点评: 也没啥，就是考察写代码的基本功，拆分字符串，compare，循环等。

6. 有两个已经排好序的数组(升序)，现在把这两个数组合成一个按升序排列的数组。
given array1=[1,3,5,7,9], given array2=[2,4,6,8,10], return newarray[1,2,3,4,5,6,7,8,9,10]
点评: 数组基本操作


7. 单词计数，输入一个字符串数组，统计每个单词出现的次数。
given ["boy","girl","boy"], return boy:2, girl:1
点评: 数据结构考察，用个map保存一下key，value即可，还是很简单的。

8. 给定两个区间，判断这两个区间是否重合，given [1,3],[5,6] return 不重合(false), given[1,3],[2,5] return 重合(true)
点评: 考察一下逻辑思维能力，没啥特别的，也就一行代码的事情。

9. 翻转链表
点评: 老题目，不过如果没准备的话，翻起来也没那么容易

10. 一个排好序的数组(升序)，给一个数字，判断数组中是否有两个数加起来=给定的数字
array=[1,2,3,4,5], given target=8, return true(3+5==8),  given 10, return false;
点评: 要求o(n)复杂度，两个指针，遍历一遍就行了。


中等难度:
1. 有一个排好序的数组(升序)，给定一个数字，找出这个数字在这个数组中第一次出现的index，如果不在数组中则返回-1.
比如array=[1,2,2,3,4,5], target=2, return 1(第一次出现2的数组下标是1)
点评: 算法复杂度要求log(n)，即要求候选人用二分查找来做，与经典的二分查找不一样，要求是要返回第一次出现该数字的index，只会'背'二分查找的同学是很难写出来的


2. 把字符串转成int，即输入"123",输出123。(不允许用库函数，绝对不允许)
点评: 很难的一道题目。各种边界考察，诸如正负号、非法字符、int越界。候选人考虑到的边界情况越多越好，不期望完全bugfree。

3. 给一个字符串，都是小写字母范围从'a'-'z', 其中有些字符出现了不止一次，删掉那些出现多次的字符，确保每个字符只出现一次。字符顺序不做要求。
比如 "bcabc",  返回"bca"，或者"cab"  都是OK的。
点评: 就是考察一下字符串的基本操作，对数据结构的理解。


4. 求pi，没错就是求pi(圆周率)。
点评: 如果候选人有机器学习相关背景，并且对于蒙特卡罗方法比较熟悉的话，应该可以写出来。


5. 对一个整数开根号(不许用库函数)
点评: 方法应该有很多。这道题目还是为某些有机器学习背景的同学准备的。我本人是比较倾向于候选人用牛顿迭代法来做，
如果接触过一些机器学习或者上过类似计算方法这样的课程，应该是第一时间反应用牛顿迭代法。


6. 给4个数字，判断能不能用+-*/算出24点。比如 5，5，5，1。可以算出24点，返回true。 (5-1/5)*5 = 24;
点评：部分有竞赛背景的同学不妨拿这道题目难为一下，只用返回true or false就可以，不需要给出具体表达式。
对于有ACM背景的同学来说30分钟应该是可以写出来的，其他正常人类就不要用这道题目为难人家了。


7. 判断一个字符串是不是合法的ip(不许用正则)
点评: 考察字符串基本操作，各种边界条件。要想写个bugfree的没有那么简单。


8. 翻转一个int，即输入12345，输出54321. 输入-123，输出-321
点评: 候选人至少要考虑两个场景，负数和越界。其他的就是一些基本功的考察。写好也不容易。



9. 10进制数转成16进制(不许用库函数，不许用)， given 100, return 64,  given 250, return FA
点评: 就是各种基本功了，也没啥，力求代码写得好看点。



10. 有两个n维向量(n 很大)，并且两个向量中有大量的0，求这两个向量的点积。
点积的定义: 给定两个向量，向量a[1,2,,,,n],向量b[1,2,,,,n]，(两个向量的维度一定是一样的)，点积= a1*b1 + a2*b2 + ....+ an*bn;
点评: 一个小算法，因为向量中有大量的0，所以可以用一些小技巧提高一下算点积的速度，仅此而已。















